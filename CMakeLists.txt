cmake_minimum_required(VERSION 3.20)
project(blktool C)
set(CMAKE_C_STANDARD 11)
include(CheckSymbolExists)
include(CheckIncludeFile)
include(CheckIncludeFiles)
include(CheckCSourceCompiles)
include(CheckTypeSize)
list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE)
check_symbol_exists(strndup                       "string.h" HAVE_STRNDUP)
check_symbol_exists(strcasecmp                    "string.h" HAVE_STRCASECMP)
check_symbol_exists(strncasecmp                   "string.h" HAVE_STRNCASECMP)
check_symbol_exists(stricmp                       "string.h" HAVE_STRICMP)
check_symbol_exists(strnicmp                      "string.h" HAVE_STRNICMP)
check_symbol_exists(mempcpy                       "string.h" HAVE_MEMPCPY)
check_symbol_exists(getprogname                   "stdlib.h" HAVE_GETPROGNAME)
check_symbol_exists(wcwidth                       "wctype.h" HAVE_WCWIDTH)
check_symbol_exists(funopen                       "stdio.h"  HAVE_FUNOPEN)
check_symbol_exists(open_memstream                "stdio.h"  HAVE_OPEN_MEMSTREAM)
check_symbol_exists(program_invocation_short_name "errno.h"  HAVE_PROGRAM_INVOCATION_SHORT_NAME)
check_type_size("size_t"             SIZE_SIZE_T)
check_type_size("ssize_t"            SIZE_SSIZE_T)
check_type_size("mode_t"             SIZE_MODE_T)
check_type_size("char"               SIZE_CHAR)
check_type_size("short"              SIZE_SHORT)
check_type_size("int"                SIZE_INT)
check_type_size("long"               SIZE_LONG)
check_type_size("long long"          SIZE_LONG_LONG)
check_type_size("unsigned char"      SIZE_UNSIGNED_CHAR)
check_type_size("unsigned short"     SIZE_UNSIGNED_SHORT)
check_type_size("unsigned int"       SIZE_UNSIGNED_INT)
check_type_size("unsigned long"      SIZE_UNSIGNED_LONG)
check_type_size("unsigned long long" SIZE_UNSIGNED_LONG_LONG)
check_type_size("uint8_t"            SIZE_UINT8_T)
check_type_size("uint16_t"           SIZE_UINT16_T)
check_type_size("uint32_t"           SIZE_UINT32_T)
check_type_size("uint64_t"           SIZE_UINT64_T)
check_type_size("int8_t"             SIZE_INT8_T)
check_type_size("int16_t"            SIZE_INT16_T)
check_type_size("int32_t"            SIZE_INT32_T)
check_type_size("int64_t"            SIZE_INT64_T)
check_type_size("void*"              SIZE_POINTER)
set(CONFIG_H "${CMAKE_CURRENT_BINARY_DIR}/config.h")
configure_file(config.h.in ${CONFIG_H})
include_directories(include ${CMAKE_CURRENT_BINARY_DIR})
option(ENABLE_STATIC    "Static Build"            OFF)
option(SYSTEM_SMARTCOLS "Use system libsmartcols" ON)
if(MSVC)
	set(CMAKE_EXE_LINKER_FLAGS    "${CMAKE_EXE_LINKER_FLAGS} /MANIFEST:NO")
	set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} /MANIFEST:NO")
	set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /MANIFEST:NO")
endif()
if(UNIX)
	add_definitions(-fPIC -Wall -Wextra)
endif()
if(SYSTEM_SMARTCOLS)
	find_library(SYSTEM_SMARTCOLS smartcols)
endif()
if(SYSTEM_SMARTCOLS)
	message(STATUS "Use system libsmartcols")
else()
	message(STATUS "Use builtin libsmartcols")
endif()
add_subdirectory(compatible)
add_subdirectory(libsmartcols)
add_subdirectory(utils)
add_subdirectory(lib)
add_subdirectory(main)
